// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0--rc1
// source: proto/KafkaService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IngestionService_StartKafkaConsumerWithTransformation_FullMethodName = "/IngestionService/StartKafkaConsumerWithTransformation"
	IngestionService_StartKafkaConsumerWithHDFSPlugin_FullMethodName     = "/IngestionService/StartKafkaConsumerWithHDFSPlugin"
	IngestionService_StopKafkaConsumerWithTransformation_FullMethodName  = "/IngestionService/StopKafkaConsumerWithTransformation"
	IngestionService_CheckConsumer_FullMethodName                        = "/IngestionService/CheckConsumer"
)

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestionServiceClient interface {
	StartKafkaConsumerWithTransformation(ctx context.Context, in *ConsumerRequestWithTransformation, opts ...grpc.CallOption) (*Response, error)
	StartKafkaConsumerWithHDFSPlugin(ctx context.Context, in *ConsumerRequestWithHadoop, opts ...grpc.CallOption) (*Response, error)
	StopKafkaConsumerWithTransformation(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error)
	CheckConsumer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) StartKafkaConsumerWithTransformation(ctx context.Context, in *ConsumerRequestWithTransformation, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, IngestionService_StartKafkaConsumerWithTransformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) StartKafkaConsumerWithHDFSPlugin(ctx context.Context, in *ConsumerRequestWithHadoop, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, IngestionService_StartKafkaConsumerWithHDFSPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) StopKafkaConsumerWithTransformation(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, IngestionService_StopKafkaConsumerWithTransformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CheckConsumer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, IngestionService_CheckConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility
type IngestionServiceServer interface {
	StartKafkaConsumerWithTransformation(context.Context, *ConsumerRequestWithTransformation) (*Response, error)
	StartKafkaConsumerWithHDFSPlugin(context.Context, *ConsumerRequestWithHadoop) (*Response, error)
	StopKafkaConsumerWithTransformation(context.Context, *PingRequest) (*Response, error)
	CheckConsumer(context.Context, *PingRequest) (*Response, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestionServiceServer struct {
}

func (UnimplementedIngestionServiceServer) StartKafkaConsumerWithTransformation(context.Context, *ConsumerRequestWithTransformation) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKafkaConsumerWithTransformation not implemented")
}
func (UnimplementedIngestionServiceServer) StartKafkaConsumerWithHDFSPlugin(context.Context, *ConsumerRequestWithHadoop) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKafkaConsumerWithHDFSPlugin not implemented")
}
func (UnimplementedIngestionServiceServer) StopKafkaConsumerWithTransformation(context.Context, *PingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopKafkaConsumerWithTransformation not implemented")
}
func (UnimplementedIngestionServiceServer) CheckConsumer(context.Context, *PingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConsumer not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_StartKafkaConsumerWithTransformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerRequestWithTransformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).StartKafkaConsumerWithTransformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_StartKafkaConsumerWithTransformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).StartKafkaConsumerWithTransformation(ctx, req.(*ConsumerRequestWithTransformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_StartKafkaConsumerWithHDFSPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerRequestWithHadoop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).StartKafkaConsumerWithHDFSPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_StartKafkaConsumerWithHDFSPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).StartKafkaConsumerWithHDFSPlugin(ctx, req.(*ConsumerRequestWithHadoop))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_StopKafkaConsumerWithTransformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).StopKafkaConsumerWithTransformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_StopKafkaConsumerWithTransformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).StopKafkaConsumerWithTransformation(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CheckConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CheckConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CheckConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CheckConsumer(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartKafkaConsumerWithTransformation",
			Handler:    _IngestionService_StartKafkaConsumerWithTransformation_Handler,
		},
		{
			MethodName: "StartKafkaConsumerWithHDFSPlugin",
			Handler:    _IngestionService_StartKafkaConsumerWithHDFSPlugin_Handler,
		},
		{
			MethodName: "StopKafkaConsumerWithTransformation",
			Handler:    _IngestionService_StopKafkaConsumerWithTransformation_Handler,
		},
		{
			MethodName: "CheckConsumer",
			Handler:    _IngestionService_CheckConsumer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/KafkaService.proto",
}
